name: Build and Push Docker Image to ECR

on:
  create:
    tags:
      - 'v*' # Trigger on tags that start with 'v'
  workflow_dispatch:

env:
  AWS_REGION: "ap-south-1"
  AWS_EC2: "docker-ec2-instance"
  ECR_REPO: "docker-flask"
  GIT_SHA: $GITHUB_SHA

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION  }} 

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ap-south-1  | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com/${{ env.ECR_REPO }}:$GITHUB_SHA .
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com/${{ env.ECR_REPO }}:$GITHUB_SHA

      - name: get public ip
        id: set-pubip-env
        run: |
          echo "EC2_PUBLIC_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=${{ env.AWS_EC2 }}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)" >> "$GITHUB_ENV"          


      - name: executing remote ssh commands using ssh key
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.EC2_PUBLIC_IP }}
          username: ec2-user
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            docker image ls
            echo "removing old stuff"
            chmod 777 docker-cleanup.sh
            ./docker-cleanup.sh
            echo "running container"
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
            sleep 25
            docker run -td -p 80:5000 --name flask-app ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}:$GITHUB_SHA

    
      

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: [build]

  #   steps: 

  #     - name: Checkout Repository
  #       uses: actions/checkout@v2
  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ env.AWS_REGION  }} 
          
      # - name: get public ip
      #   id: set-pubip-env
      #   run: |
      #     echo "EC2_PUBLIC_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=${{ env.AWS_EC2 }}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)" >> "$GITHUB_ENV"          


  #     - name: executing remote ssh commands using ssh key
  #       uses: appleboy/ssh-action@v1.0.3
  #       with:
  #         host: ${{ env.EC2_PUBLIC_IP }}
  #         username: ec2-user
  #         key: ${{ secrets.SSH_PRIVATE_KEY }}
  #         port: 22
  #         script: |
  #           # docker image ls
  #           # echo "removing old stuff"
  #           # docker rm -f $(docker ps -aq)
  #           # docker rmi -f $(docker images -q)
  #           echo "running container"
  #           aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
  #           docker run -td -p 80:5000 --name flask-app ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}:$GITHUB_SHA

    
